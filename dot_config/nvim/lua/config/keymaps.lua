-- Set keymaps in one go, follows lazy.nvim LazyKey spec
--
-- local function map(args)
--   local mode = args.mode or "n"
--
--   local opts = {}
--   for k, v in pairs(args) do
--     if type(k) ~= "number" and k ~= "mode" then
--       opts[k] = v
--     end
--   end
--
--   vim.keymap.set(mode, args[1], args[2], opts)
-- end
--
local map = vim.keymap.set

map("i", "jk", "<Esc>", { desc = "Exit insert mode" })
map("i", "<C-b>", "<ESC>^i", { desc = "Go to start of line" })
map("i", "<C-e>", "<End>", { desc = "Go to end of line" })

-- TODO: merge these with lsp keymaps
-- stylua: ignore
-- map {
--   { "gl", vim.diagnostic.open_float, desc = "View Diagnostic" },
--   { "]d", vim.diagnostic.goto_next, desc = "Goto Next Diagnostic" },
--   { "[d", vim.diagnostic.goto_prev, desc = "Goto Prev Diagnostic" },
--   {
--     "]e",
--     function() vim.diagnostic.goto_next { severity = vim.diagnostic.severity.ERROR } end,
--     desc = "Goto Next Error",
--   },
--   {
--     "[e",
--     function() vim.diagnostic.goto_prev { severity = vim.diagnostic.severity.ERROR } end,
--     desc = "Goto Prev Error",
--   },
--   { "<leader>ld", vim.diagnostic.setloclist, desc = "Document Diagnostics" },
--   { "<leader>wd", vim.diagnostic.setqflist, desc = "Workspace Diagnostics" },
-- }

-- switch between buffers
-- map {
--   -- { "<C-p>", "<cmd> BufferLinePick <cr>", desc = "Pick Buffer"},
-- }




-- miscellaneous maps
-- map {
--   -- Don't copy the replaced text after pasting in visual mode
--   -- https://vim.fandom.com/wiki/Replace_a_word_with_yanked_text#Alternative_mapping_for_paste
--   { "p", 'p:let @+=@0<CR>:let @"=@0<CR>', mode = "x", silent = true },
--   -- { "<", "<gv", mode = "v", silent = true },
--   -- { ">", ">gv", mode = "v", silent = true },
--   {
--     "gx",
--     function()
--       -- use 'explorer' for win and 'open' for mac
--       vim.fn.jobstart({ "xdg-open", vim.fn.expand "<cfile>" }, { detach = true })
--     end,
--     -- '<cmd>call jobstart(["xdg-open", expand("<cfile>")], {"detach": v:true})<cr>',
--     desc = "Open link under cursor",
--   },
  -- TODO: fix this
  -- vim.cmd [[ cnoremap <expr>  <C-j>  pumvisible() ? "<C-n>" : "<C-j>" ]]
--}

-- defaults = {
--       mode = { "n", "v" },
--       ["g"] = { name = "+goto" },
--       ["gz"] = { name = "+surround" },
--       ["]"] = { name = "+next" },
--       ["["] = { name = "+prev" },
--       ["<leader><tab>"] = { name = "+tabs" },
--       ["<leader>b"] = { name = "+buffer" },
--       ["<leader>c"] = { name = "+code" },
--       ["<leader>f"] = { name = "+file/find" },
--       ["<leader>g"] = { name = "+git" },
--       ["<leader>gh"] = { name = "+hunks" },
--       ["<leader>q"] = { name = "+quit/session" },
--       ["<leader>s"] = { name = "+search" },
--       ["<leader>u"] = { name = "+ui" },
--       ["<leader>w"] = { name = "+windows" },
--       ["<leader>x"] = { name = "+diagnostics/quickfix" },
--     },

-- map {
--
--   { "<leader>a", "<cmd> Alpha <cr>", desc = "Alpha" },
--   { "<leader>q", "<cmd> q <cr>", desc = "Quit Window" },
--   {
--     "<leader>x",
--     function()
--       require("mini.bufremove").delete(0, false)
--     end,
--     desc = "Close Buffer",
--   },
--   { "<leader>e", "<cmd>Neotree toggle<cr>", desc = "Toggle NeoTree" },
--   { "<leader>E", "<cmd>Neotree focus<cr>", desc = "Focus NeoTree" },
--   { "<leader>r", "<cmd>SessionManager load_session<cr>", desc = "Load Session" },
-- }
--
-- -- plugin manager
-- map {
--   { "<leader>pi", "<cmd> Lazy Install <cr>", desc = "Install" },
--   { "<leader>pp", "<cmd> Lazy profile <cr>", desc = "Profile" },
--   { "<leader>ps", "<cmd> Lazy show <cr>", desc = "Status" },
--   { "<leader>pS", "<cmd> Lazy sync <cr>", desc = "Sync" },
--   { "<leader>pu", "<cmd> Lazy update <cr>", desc = "Update" },
-- }
--
-- -- git
-- map {
--   { "<leader>gj", "<cmd> Gitsigns next_hunk <cr>", desc = "Next Hunk" },
--   { "<leader>gk", "<cmd> Gitsigns prev_hunk <cr>", desc = "Prev Hunk" },
--   { "<leader>gl", "<cmd> Gitsigns blame_line <cr>", desc = "Blame" },
--   { "<leader>gp", "<cmd> Gitsigns preview_hunk <cr>", desc = "Preview Hunk" },
--   { "<leader>gr", "<cmd> Gitsigns reset_hunk <cr>", desc = "Reset Hunk" },
--   { "<leader>gR", "<cmd> Gitsigns reset_buffer <cr>", desc = "Reset Buffer" },
--   { "<leader>gs", "<cmd> Gitsigns stage_hunk <cr>", desc = "Stage Hunk" },
--   { "<leader>gu", "<cmd> Gitsigns undo_stage_hunk <cr>", desc = "Undo Stage Hunk" },
--   { "<leader>gd", "<cmd> DiffviewOpen<cr> ", desc = "Open DiffView" },
--   { "<leader>gD", "<cmd> DiffviewClose<cr> ", desc = "Close DiffView" },
-- }
--
-- -- telescope
-- map {
--   {
--     "<leader>b",
--     "<cmd> Telescope buffers theme=dropdown previewer=false <cr>",
--     desc = "Find Buffers",
--   },
--   {
--     "<leader>f",
--     "<cmd> Telescope find_files theme=dropdown previewer=false <cr>",
--     desc = "Find Files",
--   },
--   {
--     "<leader>F",
--     "<cmd> Telescope live_grep theme=ivy <CR>",
--     desc = "Live grep",
--   },
--   -- search
--   { "<leader>sc", "<cmd>Telescope colorscheme<cr>", desc = "Colorscheme" },
--   { "<leader>sh", "<cmd>Telescope help_tags<cr>", desc = "Find Help" },
--   { "<leader>sr", "<cmd>Telescope oldfiles<cr>", desc = "Open Recent File" },
--   { "<leader>sR", "<cmd>Telescope registers<cr>", desc = "Registers" },
--   { "<leader>sk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps" },
--   { "<leader>sC", "<cmd>Telescope commands<cr>", desc = "Commands" },
--   { "<leader>sw", "<cmd>Telescope grep_string theme=ivy<cr>", desc = "Search Word" },
--   -- git
--   { "<leader>gf", "<cmd>Telescope git_files<cr>", desc = "Search git files" },
--   {
--     "<leader>go",
--     "<cmd>Telescope git_status<cr>",
--     desc = "Open changed files",
--   },
--   { "<leader>gb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch" },
--   { "<leader>gc", "<cmd>Telescope git_commits<cr>", desc = "Checkout commit" },
-- }

-- illuminate
-- map {
--   {
--     "]]",
--     function()
--       require("illuminate").goto_next_reference(false)
--     end,
--     desc = "Next Reference",
--   },
--   {
--     "[[",
--     function()
--       require("illuminate").goto_prev_reference(false)
--     end,
--     desc = "Prev Reference",
--   },
-- }
-- also set it after loading ftplugins, since a lot overwrite [[ and ]]
-- vim.api.nvim_create_autocmd("FileType", {
--   callback = function()
--     local buffer = vim.api.nvim_get_current_buf()
--     map("]]", "next", buffer)
--     map("[[", "prev", buffer)
--   end,
-- })
--
-- -- neogen
-- map {
--   {
--     "<leader>cf",
--     "<cmd>lua require'neogen'.generate{type = 'func'}<cr>",
--     desc = "Function Annotation",
--   },
--   {
--     "<leader>cc",
--     "<cmd>lua require'neogen'.generate{type = 'class'}<cr>",
--     desc = "Class Annotation",
--   },
--   {
--     "<leader>ct",
--     "<cmd>lua require'neogen'.generate{type = 'type'}<cr>",
--     desc = "Type Annotation",
--   },
--   {
--     "<leader>cF",
--     "<cmd>lua require'neogen'.generate{type = 'file'}<cr>",
--     desc = "File Annotation",
--   },
-- }

-- stylua: ignore
-- map{
--   -- stylua: ignore
--   { "]t", function() require("todo-comments").jump_next() end, desc = "Next todo comment" },
--   { "[t", function() require("todo-comments").jump_prev() end, desc = "Previous todo comment" },
--   { "<leader>xt", "<cmd>TodoTrouble<cr>", desc = "Todo (Trouble)" },
--   { "<leader>xT", "<cmd>TodoTrouble keywords=TODO,FIX,FIXME<cr>", desc = "Todo/Fix/Fixme (Trouble)" },
--   { "<leader>st", "<cmd>TodoTelescope<cr>", desc = "Todo" },
--   { "<leader>sT", "<cmd>TodoTelescope keywords=TODO,FIX,FIXME<cr>", desc = "Todo/Fix/Fixme" },
-- }

-- stylua: ignore
-- map {
--   { "<leader>qs", function() require("persistence").load() end, desc = "Restore Session" },
--   { "<leader>ql", function() require("persistence").load({ last = true }) end, desc = "Restore Last Session" },
--   { "<leader>qd", function() require("persistence").stop() end, desc = "Don't Save Current Session" },
-- }

-- map {

-- { "s", mode = { "n", "o", "x" }, function() require("flash").jump() end, desc = "Flash" },
-- { "S", mode = { "n", "o", "x" }, function() require("flash").treesitter() end, desc = "Flash Treesitter" },
-- { "r", mode = "o", function() require("flash").remote() end, desc = "Remote Flash" },
-- { "R", mode = { "o", "x" }, function() require("flash").treesitter_search() end, desc = "Treesitter Search" },
-- { "<c-s>", mode = { "c" }, function() require("flash").toggle() end, desc = "Toggle Flash Search" },
-- }
--  { "<leader>,", "<cmd>Telescope buffers show_all_buffers=true<cr>", desc = "Switch Buffer" },
--     { "<leader>/", Util.telescope("live_grep"), desc = "Grep (root dir)" },
--     { "<leader>:", "<cmd>Telescope command_history<cr>", desc = "Command History" },
--     { "<leader><space>", Util.telescope("files"), desc = "Find Files (root dir)" },
--     -- find
--     { "<leader>fb", "<cmd>Telescope buffers<cr>", desc = "Buffers" },
--     { "<leader>ff", Util.telescope("files"), desc = "Find Files (root dir)" },
--     { "<leader>fF", Util.telescope("files", { cwd = false }), desc = "Find Files (cwd)" },
--     { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "Recent" },
--     { "<leader>fR", Util.telescope("oldfiles", { cwd = vim.loop.cwd() }), desc = "Recent (cwd)" },
--     -- git
--     { "<leader>gc", "<cmd>Telescope git_commits<CR>", desc = "commits" },
--     { "<leader>gs", "<cmd>Telescope git_status<CR>", desc = "status" },
--     -- search
--     { '<leader>s"', "<cmd>Telescope registers<cr>", desc = "Registers" },
--     { "<leader>sa", "<cmd>Telescope autocommands<cr>", desc = "Auto Commands" },
--     { "<leader>sb", "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "Buffer" },
--     { "<leader>sc", "<cmd>Telescope command_history<cr>", desc = "Command History" },
--     { "<leader>sC", "<cmd>Telescope commands<cr>", desc = "Commands" },
--     { "<leader>sd", "<cmd>Telescope diagnostics bufnr=0<cr>", desc = "Document diagnostics" },
--     { "<leader>sD", "<cmd>Telescope diagnostics<cr>", desc = "Workspace diagnostics" },
--     { "<leader>sg", Util.telescope("live_grep"), desc = "Grep (root dir)" },
--     { "<leader>sG", Util.telescope("live_grep", { cwd = false }), desc = "Grep (cwd)" },
--     { "<leader>sh", "<cmd>Telescope help_tags<cr>", desc = "Help Pages" },
--     { "<leader>sH", "<cmd>Telescope highlights<cr>", desc = "Search Highlight Groups" },
--     { "<leader>sk", "<cmd>Telescope keymaps<cr>", desc = "Key Maps" },
--     { "<leader>sM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages" },
--     { "<leader>sm", "<cmd>Telescope marks<cr>", desc = "Jump to Mark" },
--     { "<leader>so", "<cmd>Telescope vim_options<cr>", desc = "Options" },
--     { "<leader>sR", "<cmd>Telescope resume<cr>", desc = "Resume" },
--     { "<leader>sw", Util.telescope("grep_string", { word_match = "-w" }), desc = "Word (root dir)" },
--     { "<leader>sW", Util.telescope("grep_string", { cwd = false, word_match = "-w" }), desc = "Word (cwd)" },
--     { "<leader>sw", Util.telescope("grep_string"), mode = "v", desc = "Selection (root dir)" },
--     { "<leader>sW", Util.telescope("grep_string", { cwd = false }), mode = "v", desc = "Selection (cwd)" },
--     { "<leader>uC", Util.telescope("colorscheme", { enable_preview = true }), desc = "Colorscheme with preview" },
--     {
--       "<leader>ss",
--       Util.telescope("lsp_document_symbols", {
--         symbols = {
--           "Class",
--           "Function",
--           "Method",
--           "Constructor",
--           "Interface",
--           "Module",
--           "Struct",
--           "Trait",
--           "Field",
--           "Property",
--         },
--       }),
--       desc = "Goto Symbol",
--     },
--     {
--       "<leader>sS",
--       Util.telescope("lsp_dynamic_workspace_symbols", {
--         symbols = {
--           "Class",
--           "Function",
--           "Method",
--           "Constructor",
--           "Interface",
--           "Module",
--           "Struct",
--           "Trait",
--           "Field",
--           "Property",
--         },
--       }),
--       desc = "Goto Symbol (Workspace)",
--     },
--   },
--
--


-- local lazyterm = function() Util.float_term(nil, { cwd = Util.get_root() }) end
-- map("n", "<leader>ft", lazyterm, { desc = "Terminal (root dir)" })
-- map("n", "<leader>fT", function() Util.float_term() end, { desc = "Terminal (cwd)" })
-- map("n", "<c-/>", lazyterm, { desc = "Terminal (root dir)" })
-- map("n", "<c-_>", lazyterm, { desc = "which_key_ignore" })
-- map("n", "<leader>bb", "<cmd>e #<cr>", { desc = "Switch to Other Buffer" })
-- map("n", "<leader>`", "<cmd>e #<cr>", { desc = "Switch to Other Buffer" })
--map("n", "<leader>l", "<cmd>Lazy<cr>", { desc = "Lazy" })
--map({ "n", "v" }, "<leader>cf", function()
--   require("lazyvim.plugins.lsp.format").format({ force = true })
-- end, { desc = "Format" })
